use chrono::{DateTime, Utc};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReportRequestList {
  /// Current page
  #[serde(rename = "page", skip_serializing_if = "Option::is_none")]
  pub page: Option<i32>,
  /// Number of records fetched.
  #[serde(rename = "totalCount", skip_serializing_if = "Option::is_none")]
  pub total_count: Option<i64>,
  /// Number of records to be returned. Default is 10.
  #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
  pub limit: Option<i32>,
  /// Used for pagination when more than specified limit (or default 10) records are found. Use this param for next API call. Just have to use this value as query param. Need to pass only the cursor value and not the initial API call query params. For e.g. if ['nextCursor'='reportType=ITEM&requestStatus=ERROR&requestSubmissionStartDate=2021-08-20T10:52:59Z&requestSubmissionEndDate=2021-09-14T10:52:59Z&page=2&limit=1'] then subsequent call to will be [marketplace.walmartapis.com/v3/reports/reportRequests?reportType=ITEM&requestStatus=ERROR&requestSubmissionStartDate=2021-08-20T10:52:59Z&requestSubmissionEndDate=2021-09-14T10:52:59Z&page=2&limit=1]. Just have to use nextCursor value instead of query params
  #[serde(rename = "nextCursor", skip_serializing_if = "Option::is_none")]
  pub next_cursor: Option<String>,
  /// List of requests
  #[serde(rename = "requests", skip_serializing_if = "Option::is_none")]
  pub requests: Option<Vec<ReportRequest>>,
}

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateReportRequestInput {
  /// Columns to exclude from report
  #[serde(rename = "excludeColumns", skip_serializing_if = "Option::is_none")]
  pub exclude_columns: Option<Vec<String>>,
}

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReportRequest {
  /// Automated ID generated by system that uniquely identifies the report request.
  #[serde(rename = "requestId")]
  pub request_id: String,
  /// Status of report request. Possible values are RECEIVED, INPROGRESS, READY, ERROR.
  #[serde(rename = "requestStatus")]
  pub request_status: ReportRequestStatus,
  /// Date and time on which the report request is submitted.
  #[serde(
    rename = "requestSubmissionDate",
    skip_serializing_if = "Option::is_none"
  )]
  pub request_submission_date: Option<DateTime<Utc>>,
  /// Type of report for which the request is created. Example, ITEM for Item Report.
  #[serde(rename = "reportType")]
  pub report_type: String,
  /// Version of report for which the request is created. Example, v1.
  #[serde(rename = "reportVersion", skip_serializing_if = "Option::is_none")]
  pub report_version: Option<String>,
}

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReportDownload {
  /// URL to be used to download the report.
  #[serde(rename = "downloadURL", skip_serializing_if = "Option::is_none")]
  pub download_url: Option<String>,
  /// Time till when the URL to download the report will be valid.
  #[serde(
    rename = "downloadURLExpirationTime",
    skip_serializing_if = "Option::is_none"
  )]
  pub download_url_expiration_time: Option<String>,
  /// Automated ID generated by system that uniquely identifies the report request.
  #[serde(rename = "requestId")]
  pub request_id: String,
  /// Status of report request. Possible values are RECEIVED, INPROGRESS, READY, ERROR.
  #[serde(rename = "requestStatus")]
  pub request_status: ReportRequestStatus,
  /// Date and time on which the report request is submitted.
  #[serde(
    rename = "requestSubmissionDate",
    skip_serializing_if = "Option::is_none"
  )]
  pub request_submission_date: Option<DateTime<Utc>>,
  /// Type of report for which the request is created. Example, ITEM for Item Report.
  #[serde(rename = "reportType")]
  pub report_type: String,
  /// Version of report for which the request is created. Example, v1.
  #[serde(rename = "reportVersion", skip_serializing_if = "Option::is_none")]
  pub report_version: Option<String>,
  /// Date and time on which the report is generated. Attribute is available only if report is generated.
  #[serde(
    rename = "reportGenerationDate",
    skip_serializing_if = "Option::is_none"
  )]
  pub report_generation_date: Option<DateTime<Utc>>,
}

/// Status of report request. Possible values are RECEIVED, INPROGRESS, READY, ERROR.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReportRequestStatus {
  #[serde(rename = "RECEIVED")]
  Received,
  #[serde(rename = "INPROGRESS")]
  Inprogress,
  #[serde(rename = "READY")]
  Ready,
  #[serde(rename = "ERROR")]
  Error,
}
